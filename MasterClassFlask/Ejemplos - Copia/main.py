"""
main.py
========
Aplicaci√≥n Flask sencilla con:
- P√°gina de inicio
- Ejemplos de rutas din√°micas
- P√°ginas basadas en plantillas Jinja
- Listado de clientes

Para lanzar en consola:
    python main.py
o bien
    flask --app main run --debug
"""

from flask import Flask, render_template, request  # importamos Flask y helper para plantillas
from datetime import datetime  # importamos datetime para mostrar la fecha actual

app = Flask(__name__)  # creamos la aplicaci√≥n
app.config.from_mapping(
    SECRET_KEY = 'dev'  # ¬°SOLO PARA ENTORNOS DE PRUEBA!
)

# --------------------------------------------------
# 1Ô∏è‚É£  P√°gina de inicio
# --------------------------------------------------
@app.route("/")        # ruta ra√≠z
@app.route("/home")    # alias /home ‚Üí misma funci√≥n
def home():
    """
    Renderiza la p√°gina de inicio.
    Pasamos la variable 'name' para saludar al usuario.
    """
    date = datetime.now()

    return render_template("home.html", name="√Ångel", date=date, repeat=repeat)




# --------------------------------------------------
# 2Ô∏è‚É£  Saludo simple
# --------------------------------------------------
@app.route("/saludo_personal/<nombre>")
def saludo_personal(nombre):
    """
    Saluda al usuario con el nombre capturado en la URL.
    Ej.: /saludo_personal/Ada -> ‚ÄúBienvenido Ada‚Äù
    """
    return f"<h1>Bienvenido {nombre}</h1>"


# --------------------------------------------------
# 3Ô∏è‚É£  Saludo con edad
# --------------------------------------------------
@app.route("/saludo_edad/<nombre>/<int:edad>")
def saludo_edad(nombre, edad):
    """
    Devuelve un mensaje distinto seg√∫n la edad recibida:
    - < 18  : menor de edad
    - == 18 : acaba de cumplir la mayor√≠a
    - > 18  : mayor de edad
    """
    # Determinamos el texto adecuado
    if edad < 18:
        titulo = "eres menor de edad"
    elif edad == 18:
        titulo = "acab√°s de cumplir la mayor√≠a de edad"
    else:
        titulo = "eres mayor de edad"

    # Nota: devolvemos HTML en crudo porque es un ejemplo r√°pido
    return f"<h1>Hola {nombre}, tienes {edad} a√±os, {titulo}.</h1>"


# --------------------------------------------------
# 4Ô∏è‚É£  P√°ginas ‚Äúest√°ticas‚Äù (renderizadas con Jinja,
#     pero sin l√≥gica adicional)
# --------------------------------------------------
@app.route("/contacto")
def contacto():
    """Muestra la p√°gina de contacto."""
    return render_template("contacto.html")


@app.route("/servicios")
def servicios():
    """Muestra la p√°gina de servicios."""
    return render_template("servicios.html")


# --------------------------------------------------
# 5Ô∏è‚É£  Lista de clientes
# --------------------------------------------------
@app.route("/clientes")
def clientes():
    """
    Genera una lista de clientes (hard-coded por ahora) y se la
    pasa a la plantilla 'clientes.html' para que Jinja la recorra.
    """
    lista_clientes = [
        "Manolo Garc√≠a",
        "Ana Jim√©nez",
        "Andr√©s Gonz√°lez",
        "Sonia P√©rez",
    ]
    return render_template(
        "clientes.html",
        name="√Ångel",           # Para el saludo opcional de la plantilla
        clientes=lista_clientes  # La lista que se mostrar√°
    )


# --------------------------------------------------
#  Punto de entrada cuando ejecutas ‚Äúpython main.py‚Äù
# --------------------------------------------------
if __name__ == "__main__":
    # debug=True recarga el servidor al guardar cambios y
    # muestra trazas completas si algo falla
    app.run(debug=True)


# --------------------------------------------------
# üíª  Filtro personalizado
# --------------------------------------------------
@app.add_template_filter
def today(date):
    return date.strftime('%d-%m-%Y')

# --------------------------------------------------
# ‚úçÔ∏è  Funciones propias
#     Repetir√° un String N veces
# --------------------------------------------------

def repeat(s, n):
    return s * n


# --------------------------------------------------
# üíª  Formulario de registro con WTForm

# --------------------------------------------------
from flask_wtf import FlaskForm
from wtforms import StringField, PasswordField, SubmitField
from wtforms.validators import DataRequired, Length

class RegisterForm(FlaskForm):
    username = StringField("Nombre de usuario", validators=[
        DataRequired(message="Este campo es obligatorio"),
        Length(min=4, max=25, message="El nombre debe tener entre 4 y 25 caracteres")
    ])
    
    password = PasswordField("Contrase√±a usuario", validators=[
        DataRequired(message="Este campo es obligatorio"),
        Length(min=6, max=40, message="La contrase√±a debe tener entre 6 y 40 caracteres")
    ])
    
    submit = SubmitField("Registrar")

# --------------------------------------------------
# üíª  Formulario de registro

# --------------------------------------------------
@app.route("/formulario", methods=["GET", "POST"])
def formulario():
    form = RegisterForm()
    """
    Muestra el formulario de alta de clientes.
    Si se env√≠a el formulario, lo procesa y muestra un mensaje de √©xito.
    """
    if request.method == "POST":
        # Aqu√≠ procesar√≠as los datos del formulario
        # Por ejemplo, guardar en la base de datos
        username = request.form['username']
        password = request.form['password']
        return f"Nombre de usuario: {username}, Contrase√±a: {password}"
    return render_template("formulario.html", success=True, form = form)

    # Si no se env√≠a el formulario, simplemente lo mostramos
def formulario():
    """Muestra la p√°gina del formulario de alta."""
    return render_template("formulario.html")


